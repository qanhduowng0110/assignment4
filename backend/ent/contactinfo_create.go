// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment4/ent/contactinfo"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactInfoCreate is the builder for creating a ContactInfo entity.
type ContactInfoCreate struct {
	config
	mutation *ContactInfoMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cic *ContactInfoCreate) SetName(s string) *ContactInfoCreate {
	cic.mutation.SetName(s)
	return cic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cic *ContactInfoCreate) SetNillableName(s *string) *ContactInfoCreate {
	if s != nil {
		cic.SetName(*s)
	}
	return cic
}

// SetEmail sets the "email" field.
func (cic *ContactInfoCreate) SetEmail(s string) *ContactInfoCreate {
	cic.mutation.SetEmail(s)
	return cic
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cic *ContactInfoCreate) SetNillableEmail(s *string) *ContactInfoCreate {
	if s != nil {
		cic.SetEmail(*s)
	}
	return cic
}

// SetMessages sets the "messages" field.
func (cic *ContactInfoCreate) SetMessages(s string) *ContactInfoCreate {
	cic.mutation.SetMessages(s)
	return cic
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (cic *ContactInfoCreate) SetNillableMessages(s *string) *ContactInfoCreate {
	if s != nil {
		cic.SetMessages(*s)
	}
	return cic
}

// SetCreatedAt sets the "created_at" field.
func (cic *ContactInfoCreate) SetCreatedAt(t time.Time) *ContactInfoCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *ContactInfoCreate) SetNillableCreatedAt(t *time.Time) *ContactInfoCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetID sets the "id" field.
func (cic *ContactInfoCreate) SetID(i int) *ContactInfoCreate {
	cic.mutation.SetID(i)
	return cic
}

// Mutation returns the ContactInfoMutation object of the builder.
func (cic *ContactInfoCreate) Mutation() *ContactInfoMutation {
	return cic.mutation
}

// Save creates the ContactInfo in the database.
func (cic *ContactInfoCreate) Save(ctx context.Context) (*ContactInfo, error) {
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *ContactInfoCreate) SaveX(ctx context.Context) *ContactInfo {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *ContactInfoCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *ContactInfoCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *ContactInfoCreate) check() error {
	return nil
}

func (cic *ContactInfoCreate) sqlSave(ctx context.Context) (*ContactInfo, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *ContactInfoCreate) createSpec() (*ContactInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactInfo{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(contactinfo.Table, sqlgraph.NewFieldSpec(contactinfo.FieldID, field.TypeInt))
	)
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.Name(); ok {
		_spec.SetField(contactinfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cic.mutation.Email(); ok {
		_spec.SetField(contactinfo.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cic.mutation.Messages(); ok {
		_spec.SetField(contactinfo.FieldMessages, field.TypeString, value)
		_node.Messages = value
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(contactinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// ContactInfoCreateBulk is the builder for creating many ContactInfo entities in bulk.
type ContactInfoCreateBulk struct {
	config
	err      error
	builders []*ContactInfoCreate
}

// Save creates the ContactInfo entities in the database.
func (cicb *ContactInfoCreateBulk) Save(ctx context.Context) ([]*ContactInfo, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*ContactInfo, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *ContactInfoCreateBulk) SaveX(ctx context.Context) []*ContactInfo {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *ContactInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *ContactInfoCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
