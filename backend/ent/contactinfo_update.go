// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment4/ent/contactinfo"
	"assignment4/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactInfoUpdate is the builder for updating ContactInfo entities.
type ContactInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ContactInfoMutation
}

// Where appends a list predicates to the ContactInfoUpdate builder.
func (ciu *ContactInfoUpdate) Where(ps ...predicate.ContactInfo) *ContactInfoUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetName sets the "name" field.
func (ciu *ContactInfoUpdate) SetName(s string) *ContactInfoUpdate {
	ciu.mutation.SetName(s)
	return ciu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciu *ContactInfoUpdate) SetNillableName(s *string) *ContactInfoUpdate {
	if s != nil {
		ciu.SetName(*s)
	}
	return ciu
}

// ClearName clears the value of the "name" field.
func (ciu *ContactInfoUpdate) ClearName() *ContactInfoUpdate {
	ciu.mutation.ClearName()
	return ciu
}

// SetEmail sets the "email" field.
func (ciu *ContactInfoUpdate) SetEmail(s string) *ContactInfoUpdate {
	ciu.mutation.SetEmail(s)
	return ciu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ciu *ContactInfoUpdate) SetNillableEmail(s *string) *ContactInfoUpdate {
	if s != nil {
		ciu.SetEmail(*s)
	}
	return ciu
}

// ClearEmail clears the value of the "email" field.
func (ciu *ContactInfoUpdate) ClearEmail() *ContactInfoUpdate {
	ciu.mutation.ClearEmail()
	return ciu
}

// SetMessages sets the "messages" field.
func (ciu *ContactInfoUpdate) SetMessages(s string) *ContactInfoUpdate {
	ciu.mutation.SetMessages(s)
	return ciu
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (ciu *ContactInfoUpdate) SetNillableMessages(s *string) *ContactInfoUpdate {
	if s != nil {
		ciu.SetMessages(*s)
	}
	return ciu
}

// ClearMessages clears the value of the "messages" field.
func (ciu *ContactInfoUpdate) ClearMessages() *ContactInfoUpdate {
	ciu.mutation.ClearMessages()
	return ciu
}

// SetCreatedAt sets the "created_at" field.
func (ciu *ContactInfoUpdate) SetCreatedAt(t time.Time) *ContactInfoUpdate {
	ciu.mutation.SetCreatedAt(t)
	return ciu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciu *ContactInfoUpdate) SetNillableCreatedAt(t *time.Time) *ContactInfoUpdate {
	if t != nil {
		ciu.SetCreatedAt(*t)
	}
	return ciu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ciu *ContactInfoUpdate) ClearCreatedAt() *ContactInfoUpdate {
	ciu.mutation.ClearCreatedAt()
	return ciu
}

// Mutation returns the ContactInfoMutation object of the builder.
func (ciu *ContactInfoUpdate) Mutation() *ContactInfoMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *ContactInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *ContactInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *ContactInfoUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *ContactInfoUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *ContactInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactinfo.Table, contactinfo.Columns, sqlgraph.NewFieldSpec(contactinfo.FieldID, field.TypeInt))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Name(); ok {
		_spec.SetField(contactinfo.FieldName, field.TypeString, value)
	}
	if ciu.mutation.NameCleared() {
		_spec.ClearField(contactinfo.FieldName, field.TypeString)
	}
	if value, ok := ciu.mutation.Email(); ok {
		_spec.SetField(contactinfo.FieldEmail, field.TypeString, value)
	}
	if ciu.mutation.EmailCleared() {
		_spec.ClearField(contactinfo.FieldEmail, field.TypeString)
	}
	if value, ok := ciu.mutation.Messages(); ok {
		_spec.SetField(contactinfo.FieldMessages, field.TypeString, value)
	}
	if ciu.mutation.MessagesCleared() {
		_spec.ClearField(contactinfo.FieldMessages, field.TypeString)
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.SetField(contactinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if ciu.mutation.CreatedAtCleared() {
		_spec.ClearField(contactinfo.FieldCreatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// ContactInfoUpdateOne is the builder for updating a single ContactInfo entity.
type ContactInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactInfoMutation
}

// SetName sets the "name" field.
func (ciuo *ContactInfoUpdateOne) SetName(s string) *ContactInfoUpdateOne {
	ciuo.mutation.SetName(s)
	return ciuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciuo *ContactInfoUpdateOne) SetNillableName(s *string) *ContactInfoUpdateOne {
	if s != nil {
		ciuo.SetName(*s)
	}
	return ciuo
}

// ClearName clears the value of the "name" field.
func (ciuo *ContactInfoUpdateOne) ClearName() *ContactInfoUpdateOne {
	ciuo.mutation.ClearName()
	return ciuo
}

// SetEmail sets the "email" field.
func (ciuo *ContactInfoUpdateOne) SetEmail(s string) *ContactInfoUpdateOne {
	ciuo.mutation.SetEmail(s)
	return ciuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ciuo *ContactInfoUpdateOne) SetNillableEmail(s *string) *ContactInfoUpdateOne {
	if s != nil {
		ciuo.SetEmail(*s)
	}
	return ciuo
}

// ClearEmail clears the value of the "email" field.
func (ciuo *ContactInfoUpdateOne) ClearEmail() *ContactInfoUpdateOne {
	ciuo.mutation.ClearEmail()
	return ciuo
}

// SetMessages sets the "messages" field.
func (ciuo *ContactInfoUpdateOne) SetMessages(s string) *ContactInfoUpdateOne {
	ciuo.mutation.SetMessages(s)
	return ciuo
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (ciuo *ContactInfoUpdateOne) SetNillableMessages(s *string) *ContactInfoUpdateOne {
	if s != nil {
		ciuo.SetMessages(*s)
	}
	return ciuo
}

// ClearMessages clears the value of the "messages" field.
func (ciuo *ContactInfoUpdateOne) ClearMessages() *ContactInfoUpdateOne {
	ciuo.mutation.ClearMessages()
	return ciuo
}

// SetCreatedAt sets the "created_at" field.
func (ciuo *ContactInfoUpdateOne) SetCreatedAt(t time.Time) *ContactInfoUpdateOne {
	ciuo.mutation.SetCreatedAt(t)
	return ciuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciuo *ContactInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *ContactInfoUpdateOne {
	if t != nil {
		ciuo.SetCreatedAt(*t)
	}
	return ciuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ciuo *ContactInfoUpdateOne) ClearCreatedAt() *ContactInfoUpdateOne {
	ciuo.mutation.ClearCreatedAt()
	return ciuo
}

// Mutation returns the ContactInfoMutation object of the builder.
func (ciuo *ContactInfoUpdateOne) Mutation() *ContactInfoMutation {
	return ciuo.mutation
}

// Where appends a list predicates to the ContactInfoUpdate builder.
func (ciuo *ContactInfoUpdateOne) Where(ps ...predicate.ContactInfo) *ContactInfoUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *ContactInfoUpdateOne) Select(field string, fields ...string) *ContactInfoUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated ContactInfo entity.
func (ciuo *ContactInfoUpdateOne) Save(ctx context.Context) (*ContactInfo, error) {
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *ContactInfoUpdateOne) SaveX(ctx context.Context) *ContactInfo {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *ContactInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *ContactInfoUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *ContactInfoUpdateOne) sqlSave(ctx context.Context) (_node *ContactInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactinfo.Table, contactinfo.Columns, sqlgraph.NewFieldSpec(contactinfo.FieldID, field.TypeInt))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContactInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactinfo.FieldID)
		for _, f := range fields {
			if !contactinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contactinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Name(); ok {
		_spec.SetField(contactinfo.FieldName, field.TypeString, value)
	}
	if ciuo.mutation.NameCleared() {
		_spec.ClearField(contactinfo.FieldName, field.TypeString)
	}
	if value, ok := ciuo.mutation.Email(); ok {
		_spec.SetField(contactinfo.FieldEmail, field.TypeString, value)
	}
	if ciuo.mutation.EmailCleared() {
		_spec.ClearField(contactinfo.FieldEmail, field.TypeString)
	}
	if value, ok := ciuo.mutation.Messages(); ok {
		_spec.SetField(contactinfo.FieldMessages, field.TypeString, value)
	}
	if ciuo.mutation.MessagesCleared() {
		_spec.ClearField(contactinfo.FieldMessages, field.TypeString)
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.SetField(contactinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if ciuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contactinfo.FieldCreatedAt, field.TypeTime)
	}
	_node = &ContactInfo{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
